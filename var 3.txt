
1. Напишите программу, которая c помощью рекурсии для цифры k выводит таблицу умножения:
2 x k = ...
3 x k = ...
.....
9 x k = ...
Циклов быть не должно.

2. Напишите программу, которая по заданной строке (в английском алфавите) определяет длину самой длинной подстроки, где буквы будут идти вначале все строчные, потом прописные. При этом число гласных и согласных в этой строке должно совпадать. Сложность решения должна быть n log n, где n - это длины строки. Написать для этой программы 4 существенно разных теста

3. Создать класс "Треугольник". Выделить необходимые поля (можно задать тремя парами координат). Создать конструктор, позволяющий задать все поля объекта.
Методы:
- посчитать площадь, периметр
- проверить подобие с другим треугольником.
- переопределить Equals и ToString.
В другом классе создать static-методы, проверяющие подобие всех треугольников в некотором массиве, а также проверку, что в этом массиве найдётся хотя бы пара одинаковых треугольников.

4. Нарисовать карту памяти в момент вывода "!", при условии, что не было сборки мусора

class B 
{
	public static int i;
	public static string s;
	public int d;
	public B b;
}
static void F(B[] bb, B b) 
{
	if (B.i = bb.Length) return;
	bb[B.i].b = b;
	b.d++;
	b = bb[B.i].b;
	B.i++;
	F(bb, bb[B.i]);
	Console.WriteLine("!");
}
static void Main() 
{
	B[] bb = new B[4];
	bb[0] = new B { d = 2 };
	bb[1] = new B { d = 4, b = bb[0] };
	bb[2] = new B { d = 5, b = bb[1] };
	bb[3] = new B { d = 6, b = bb[1].b };
	B.s = "asd";
	B.i++;
	F(bb, bb[B.i]);
}